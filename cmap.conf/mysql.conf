# ----------------------------------------------------
#
# example.conf
#
# This is an example of a configuration file for a
# CMap database.  You should edit the "database"
# section with the proper arguments for your
# database.  To create a new database, copy this
# file to a name ending in ".conf" and then edit as
# needed.
#
# Remember that your webserver must be restarted to 
# enact any changes here.
#
# ----------------------------------------------------

#
# Set this to "0" if you want to disable use of
# this file.
#
is_enabled 1

#
# Database connection parameters
#
# You can only specify one database sections per conf file.
# If you wish to add more, you must make a different conf file.
# The database name must be unique across all conf files in this dir.
#
# Parameters:
#
#   name      : A nickname for the connection, shows up in lists
#   datasource: The string passed to DBI to connect to the database, e.g.,
#               MySQL: "dbi:mysql:CMAP"
#               PostgreSQL: "dbi:Pg:dbname=cmap"
#   user      : The user name to connect to the database
#   password  : The password to connect to the database
#
<database>
    name       LIS
    datasource dbi:mysql:hostname=bascom;database=lisaux_cmap;
    user       lisaux
    password   *******
</database>

#
#disable_cache
#                                                                                                                
# Set to 1 if the query cache should not be used.  This is handy for
#  speed testing or debugging.
# default is 0.
disable_cache 1

#
# Set to 1 to allow an editor running remotely to access the data in the
# database.
# default is 0.
# 

allow_remote_data_access 0

#
# Set to 1 to allow an editor running remotely to change the data in the
# database.
# default is 0.
# 
allow_remote_data_manipulation 0

#
#Define the default species that a new user will have selected in the opening
#menu.  This will not override the information in a cookie.
# No Default
#
#default_species_acc SPECIES_ACC

#
# What the default display option should be for feature types
# Default is 'display'.
# Other options: 'corr_only', 'ignore'
#
feature_default_display=display

# ----------------------------------------------------
#
# Start optional settings
#
# ----------------------------------------------------

#
# Introductory texts for various pages.
#
cmap_home_intro <<EOF
Welcome to the genetic and comparative maps.
EOF

#map_viewer_intro <<EOF
#EOF

feature_search_intro <<EOF
A <b>feature</b> in CMap is any element that can be placed on a
map, either as a point or an interval.  
EOF

#feature_type_info_intro <<EOF
#EOF

#map_type_info_intro <<EOF
#EOF

#species_info_intro <<EOF
#EOF

matrix_intro <<EOF
Each cell in the matrix shows the number of correspondences (and maps)
between each pair.  A correspondence is any relationship between
two features.
EOF

#map_set_info_intro <<EOF
#EOF

#
# When making name-based correspondences, the default behavior is to
# allow correspondences between features of the *exact* same type.  If
# you wish to expand the feature types allowed when making name-based
# correspondences, then add their accession IDs to this section.  The
# relationships will be reciprocal, so if you say "foo bar" then
# correspondences from features with the accession ID "foo" will be
# allowed to those with the accession ID "bar" and vice versa.
# Separate feature types with spaces.  Assert all equivalent feature
# types on one line, e.g., "foo bar baz."
# Default: Nothing
#
#add_name_correspondence foo bar baz
#add_name_correspondence fee fie
add_name_correspondence TOG SNP

# Any entries to "disallow_name_correspondence" will cause the admin
# tool to NOT make correspondences between features of the types listed.
# Either list the feature type accessions separated by spaces on one
# line or individually on separate lines, e.g.:
#
# disallow_name_correspondence centromere qtl
# - or -
# disallow_name_correspondence centromere
# disallow_name_correspondence qtl
#

# In response to database problems making correspondences with really large
# maps, the features on a map can be divided (based on feature_id) to decrease
# the number of features that the database has to handle and one time.  If you
# are not having this problem, it will not help you at all.
# Default: 1
#
# make_corr_feature_divisor 1

#
# The background color of the map image
# Values: any color found in the COLORS array of Bio::GMOD::CMap::Constants
# To view this file, either look in the "lib" directory of the original
# CMap source directory, or, if you have the very handy "pmtools" installed
# on your system, type "pmcat Bio::GMOD::CMap::Constants" on your 
# command-line.
# Default: lightgoldenrodyellow
#
background_color lightgoldenrodyellow

#
# The color of the line connecting feature correspondences
# Values: COLORS
# Default: lightblue
# 
connecting_line_color lightblue

#
# The type of line connecting feature correspondences
# Values: direct, indirect, ribbon
# Default: direct
# 
connecting_line_type direct

#
# The color of the ribbon connecting feature correspondences if the line type 
# "ribbon" is selected for the evidence type
# Values: COLORS
# Default: lightgrey
# 
connecting_ribbon_color lightgrey

#
# Cookie domain
# Default: commented out
#
#cookie_domain .foo.org

#
# Default color of a feature if the feature type's "color" is "Default"
# Values: COLORS
# Default: black
#
feature_color black

#
# Color of box around a highlighted feature
# Values: COLORS
# Default: red
#
feature_highlight_fg_color red

#
# Color of background behind a highlighted feature
# Values: COLORS
# Default: yellow
#
feature_highlight_bg_color yellow

#
# Color of a feature label when it has a correspondence
# Comment out to use the feature's own color
# Values: COLORS
# Default: red
#
feature_correspondence_color red

#
# Default font size
# Values: small, medium, large
# Default: small
#
font_size small

#
# Which field in cmap_feature to search in 
# feature search if none specified
# Values: feature_name, alternate_name, both
# Default: feature_name
#
feature_search_field feature_name

#
# Default size of images
# Values: small, medium, large
# Default: small
#
image_size small

#
# Default image format
# Values: png, jpeg
# Default: png
#
image_type png

#
# Which features to show by default
# Values: none, landmarks, all
# Default: all
#
label_features all

#
# Collapse features glyphs into one glyph if they overlap by default
# Values: 0 (don't collapse), 1 (collapse)
# Default: 1 
#
collapse_features 1

#
# Set default value for scale_maps
# Allow scaleable (set by scalable) maps to be drawn in scale
# Values: 0 (don't scale), 1 (scale)
# Default: 1
#
scale_maps 1

#
# Set default value for stack_maps
# Stack the reference maps vertically instead of side-by-side.
# Values: 0 (don't stack), 1 (stack)
# Default: 1
#
stack_maps 0

#
# Set default value for clean_view
# In the clean view, navigation buttons are removed from the picture
# Values: 0 (don't clean), 1 (clean)
# Default: 1
#
clean_view 0

#
# Set default value for show_intraslot_correspondences
# Show correspondences between maps in the same slot.
# Values: 0 (don't show), 1 (show)
# Default: 1
#
show_intraslot_correspondences 0

#
# Set default, aggregate correspondences into one or two lines.
# Values: 0 (don't aggregate), 1 (one line), 2 (two lines)
# Default: 1 
#
aggregate_correspondences 1

#
# Default color of a map if the "color" field of both the map type
# and the map set are "Default"
# Values: any color found in the COLORS array of Bio::GMOD::CMap::Constants
# Default: lightgrey
#
map_color lightgrey

#
# The titles to put atop the individual maps, e.g., "Wheat-2M"
# Your choices will be stacked in the order defined
# Values: species_common_name, map_set_name ,map_set_short_name, map_name
# Default: species_common_name,map_set_short_name, map_name
#
map_titles species_common_name 
map_titles map_set_short_name
map_titles map_name

#
# Default width of the maps
# Value: any number from 1 to 10
# Default: 8
#
map_width 8

#
# Title to use on the matrix correspondence page
# Value: a string
# Default: Welcome to the Matrix
#
matrix_title Welcome to the Matrix

#
# The smallest any map can be drawn, in pixels
# Values: any positive integer (within reason)
# Default: 20
#
min_map_pixel_height 20

#
# The maximum number of elements that can appear on a page
# (like in search results)
# Set to "0" or a negative number or comment out to disable
# Values: any positive integer (within reason)
# Default: 25
#
max_child_elements 25

#
# How many pages of results to show in searches
# Set to "0" (or a negative number) or comment out to disable
# Values: any positive integer (within reason)
# Default: 10
#
max_search_pages 10

#
# The colors of the slot background and border.
# Values: COLORS
# Default: background = beige, border = khaki
#
slot_background_color beige
slot_border_color khaki

#
# Stylesheet
# Default: /cmap/cmap.css
#
#_jac stylesheet /cmap/cmap.css
stylesheet /base/cmap.css

#
# Name of the cookie holding user preferences
# Default: CMAP_USER_PREF
#
user_pref_cookie_name CMAP_USER_PREF

#
# scalable_units
# units (such as bp) that can be used to scale the maps
# against each other.
#
<scalable>
    bp 1
    cM 0
</scalable>

# scale_conversion Available in v.14 when out
# The unit to unit conversion factor if scaling between maps of different units
# is desired.  This completely made up example is read "One band is .1 the size
# of one centimorgan".  For more information, please view the
# ADMINISTRATION.pod file in the docs/ directory.
#<scale_conversion>
#    <bands>
#        cM .1
#    </bands>
#</scale_conversion>

# Specify the default aggregation colors.
# The format is:
# <aggregated_correspondence_colors>
#   "upper_bound" "color"
#   "upper_bound" "color"
#   0 "color from last upperbound to infinity"
# </aggregated_correspondence_colors>
# See ADMINISTRATION.pod for further explaination
<aggregated_correspondence_colors>
    1    lightgrey
    2   blue
    5   purple
    20  red
    0    black
</aggregated_correspondence_colors>

# comp_menu_order
#
# Dictates the default value of how the comparison maps will be ordered in the
# menu select box.  The choices are 'display_order' and 'corrs'.  'display_order'
# is the classical order based on the maps display order and their names.
# Specifying 'corrs' orders the maps by the number of correspondences.
# Default: 'display_order'
comp_menu_order display_order

# corrs_to_map
#
# Determines if correspondence lines go to the feature or map
# Set to 1 to have them go to the map.
# Default: 0
#
corrs_to_map 0


# menu_bgcolor 
#
# The background color of some areas of the menu
# Values: COLOR
# Default: white
#
menu_bgcolor white

# menu_bgcolor_tint
#
# The background color of tinted areas of the menu
# Values: COLOR
# Default: lightgrey
#
menu_bgcolor_tint lightgrey

# menu_ref_bgcolor 
#
# The background color of some of the reference map areas of the menu
# Values: COLOR
# Default: lightblue
#
menu_ref_bgcolor lightblue

# menu_ref_bgcolor_tint
#
# The background color of tinted reference map areas of the menu
# Values: COLOR
# Default: aqua
#
menu_ref_bgcolor_tint aqua

#
# Drawing information for Feature type
#

#Notice the area_code, required_page_code and extra_forms
#  The area_code is perl code that will be used to create the javascript
#    for features/maps being described.  It will be inserted in the area map
#    over the object.  $code is a variable that holds the javascript, so
#    append all new code to the $code variable.  Some of the variables
#    from the underlying CMap code are accessable to this code.
#
#  The required_page_code lists the names of required page_code (described
#    later) needed to perform the tasks in area_code.  The page_code is 
#    added to the top of the page and is most likely going to be functions
#    to be called.
#
#  The extra_forms contains the names of extra_forms (described later)
#    which contain extra form elements.  This is so the admin can add
#    text fields, buttons, etc. 
#

<feature_type contig>
feature_type_acc contig
feature_type Contig
default_rank 1
color
shape span 
drawing_lane 1
drawing_priority 1
feature_default_display
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code
extra_forms 
</feature_type>

<feature_type read>
feature_type_acc read
feature_type Read
default_rank 1 
color
shape direction-arrow
drawing_lane 2
drawing_priority 1
feature_default_display
feature_modification_code <<EOF
EOF
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code
extra_forms 
</feature_type>

<feature_type far_apart>
feature_type_acc far_apart
feature_type Reads Too Far Apart
default_rank 1
color black
shape span 
drawing_lane 3
drawing_priority 1
feature_default_display
</feature_type>

<feature_type marker>
feature_type_acc marker
feature_type Marker
shape line 
required_page_code jquery_context_menu_code
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
</feature_type>

<feature_type int-phen>
feature_type_acc int-phen
feature_type Pnterpolated Phenotype
shape dumbbell
drawing_lane 4
color green
required_page_code jquery_context_menu_code
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
</feature_type>

<feature_type low-lod>
feature_type_acc low-lod
feature_type Low LOD Marker
shape dumbbell 
drawing_lane 4
color darkred
required_page_code jquery_context_menu_code
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
</feature_type>

<feature_type cen>
feature_type_acc cen
feature_type Centromere
shape box
color grey
required_page_code jquery_context_menu_code
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
</feature_type>

<feature_type phen>
feature_type_acc phen
feature_type Phenotype
shape span 
required_page_code jquery_context_menu_code
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
</feature_type>

<feature_type clone>
feature_type_acc clone
feature_type Clone
shape span 
required_page_code jquery_context_menu_code
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
</feature_type>

## NEW FEATURE TYPES ADDED HERE
<feature_type TOG>
feature_type_acc TOG
feature_type TOG
default_rank 1
color
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code
extra_forms
</feature_type>

<feature_type SSR-BAC>
feature_type_acc SSR-BAC
feature_type SSR-BAC
shape line
required_page_code jquery_context_menu_code
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
</feature_type>

<feature_type SSR-methyl-filtrated-genomic>

feature_type_acc SSR-methyl-filtrated-genomic
feature_type SSR-methyl-filtrated-genomic
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
</feature_type>


<feature_type SSR-enriched-genomic>
feature_type_acc SSR-enriched-genomic
feature_type SSR-enriched-genomic
shape line
required_page_code jquery_context_menu_code
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
</feature_type>


<feature_type SSR-enriched-cDNA>
feature_type_acc SSR-enriched-cDNA
feature_type SSR-enriched-cDNA
shape line
required_page_code jquery_context_menu_code
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
</feature_type>


##
##NEW EVIDENCE TYPE INSERTED
<evidence_type tblastx>
evidence_type_acc tblastx
evidence_type tblastx
rank 1
color green
</evidence_type>

<evidence_type blastn>
evidence_type_acc blastn
evidence_type blastn
rank 1
color green
</evidence_type>

<evidence_type e-PCR>
evidence_type_acc e-PCR
evidence_type e-PCR
rank 1
color blue
</evidence_type>


##





<evidence_type ANB> 
evidence_type_acc ANB 
evidence_type Automated name-based 
rank 1 
color 
ribbon_color
# The aggregated_correspondence_colors option dictates the color of aggregated
# correspondence lines for this evidence type.  It is defined the same way as
# aggregated_correspondence_colors is in the main general section above.
# Also see the ADMINISTRATION.pod.
#
#These colors will only be used if the aggregate correspondences are split based
#on evidence type.  Meaning each evidence type will have it's own aggregated
#correspondence.  It is suggested to use primary colors for each different type,
#so they can be distinguished.
<aggregated_correspondence_colors>
    1    lightblue
    20   blue
    0    darkblue
</aggregated_correspondence_colors>

</evidence_type>

#<map_type Seq>
#map_type_acc Seq
#map_type Sequence
#map_units bp
#is_relational_map 
#width 1
#shape box
#color 
#display_order 1
#unit_granularity 1
#<feature_default_display>
#</feature_default_display>
#</map_type>
#
#<map_type genetic>
#map_type_acc genetic
#map_type Genetic
#map_units cM
#is_relational_map 
#width 1
#shape box
#color 
#display_order 1
#unit_granularity 0.01
#<feature_default_display>
#</feature_default_display>
#</map_type>
#
#<map_type physical>
#map_type_acc physical
#map_type Physical
#map_units bands
#is_relational_map 1
#width 3
#shape dumbbell
#color purple
#display_order 1
#unit_granularity 1
#<feature_default_display>
#</feature_default_display>
#</map_type>

<feature_type Marker>
feature_type_acc Marker
feature_type Marker
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type PCR>
feature_type_acc PCR
feature_type PCR
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type Isozyme>
feature_type_acc Isozyme
feature_type Isozyme
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type QTL>
feature_type_acc QTL
feature_type QTL
default_rank 1
color aliceblue
shape dumbbell
drawing_lane 2
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type QTL_whole-plant>
feature_type_acc QTL_whole-plant
feature_type QTL_whole-plant
default_rank 1
color indigo
shape dumbbell
drawing_lane 2
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>


<feature_type QTL_inorganic>
feature_type_acc QTL_inorganic
feature_type QTL_inorganic
default_rank 1
color black
shape dumbbell
drawing_lane 2
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>


<feature_type QTL_fungal>
feature_type_acc QTL_fungal
feature_type QTL_fungal
default_rank 1
color brown
shape dumbbell
drawing_lane 2
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type QTL_viral>
feature_type_acc QTL_viral
feature_type QTL_viral
default_rank 1
color black
shape dumbbell
drawing_lane 2
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>


<feature_type QTL_misc>
feature_type_acc QTL_misc
feature_type QTL_misc
default_rank 1
color darkviolet
shape dumbbell
drawing_lane 2
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>


<feature_type QTL_insect>
feature_type_acc QTL_insect
feature_type QTL_insect
default_rank 1
color red
shape dumbbell
drawing_lane 2
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>


<feature_type QTL_leaf-stem>
feature_type_acc QTL_leaf-stem
feature_type QTL_leaf-stem
default_rank 1
color green
shape dumbbell
drawing_lane 2
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>


<feature_type QTL_reprod-period>
feature_type_acc QTL_reprod-period
feature_type QTL_reprod-period
default_rank 1
color crimson
shape dumbbell
drawing_lane 2
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>


<feature_type QTL_other-seed>
feature_type_acc QTL_other-seed
feature_type QTL_other-seed
default_rank 1
color violet
shape dumbbell
drawing_lane 2
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>


<feature_type QTL_oil>
feature_type_acc QTL_oil
feature_type QTL_oil
default_rank 1
color darkgoldenrod
shape dumbbell
drawing_lane 2
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>


<feature_type QTL_nematode>
feature_type_acc QTL_nematode
feature_type QTL_nematode
default_rank 1
color magenta
shape dumbbell
drawing_lane 2
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>


<feature_type QTL_protein>
feature_type_acc QTL_protein
feature_type QTL_protein
default_rank 1
color steelblue
shape dumbbell
drawing_lane 2
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>


<feature_type QTL_pod>
feature_type_acc QTL_pod
feature_type QTL_pod
default_rank 1
color yellowgreen
shape dumbbell
drawing_lane 2
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>


<feature_type QTL_yield>
feature_type_acc QTL_yield
feature_type QTL_yield
default_rank 1
color blue
shape dumbbell
drawing_lane 2
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type QTL_root>
feature_type_acc QTL_root
feature_type QTL_root
default_rank 1
color purple
shape dumbbell
drawing_lane 2
drawing_priority 1
area_code <<EOF

my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type QTL_metabolite>
feature_type_acc QTL_metabolite
feature_type QTL_metabolite
default_rank 1
color olive
shape dumbbell
drawing_lane 2
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type GenomicClone_Unfinished>
feature_type_acc GenomicClone_Unfinished
feature_type GenomicClone_Unfinished
default_rank 1
color magenta
shape direction-arrow
drawing_lane 1
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type GenomicClone_ActiveFinishing>
feature_type_acc GenomicClone_ActiveFinishing
feature_type GenomicClone_ActiveFinishing
default_rank 1
color green
shape direction-arrow
drawing_lane 1
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type GenomicClone_Finished>
feature_type_acc GenomicClone_Finished
feature_type GenomicClone_Finished
default_rank 1
color blue
shape direction-arrow
drawing_lane 1
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>


<feature_type Clone>
feature_type_acc Clone
feature_type Clone
default_rank 1
color chocolate
shape dumbbell
drawing_lane 1
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type fpc_marker>
feature_type_acc fpc_marker
feature_type fpc_marker
default_rank 1
color chocolate
shape line
drawing_lane 1
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type GenomicClone_Phase1>
feature_type_acc GenomicClone_Phase1
feature_type GenomicClone_Phase1
default_rank 1
color magenta
shape dumbbell
drawing_lane 1
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type GenomicClone_Phase2>
feature_type_acc GenomicClone_Phase2
feature_type GenomicClone_Phase2
default_rank 1
color green
shape dumbbell
drawing_lane 1
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type GenomicClone_Phase3>
feature_type_acc GenomicClone_Phase3
feature_type GenomicClone_Phase3
default_rank 1
color blue
shape dumbbell
drawing_lane 1
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type GenomicClone_MultipleAccessions>
feature_type_acc GenomicClone_MultipleAccessions
feature_type GenomicClone_MultipleAccessions
default_rank 1
color black
shape dumbbell
drawing_lane 1
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type BEST>
feature_type_acc BEST
feature_type BEST
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type SSR>
feature_type_acc SSR
feature_type SSR
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type SNP>
feature_type_acc SNP
feature_type SNP
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}
EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type CAPS>
feature_type_acc CAPS
feature_type CAPS
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type dCAPS>
feature_type_acc dCAPS
feature_type dCAPS
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>
<feature_type EST>
feature_type_acc EST
feature_type EST
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type cDNA>
feature_type_acc cDNA
feature_type cDNA
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type RBIP>
feature_type_acc RBIP
feature_type RBIP
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>


<feature_type GS>
feature_type_acc GS
feature_type GS
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>


<feature_type QTL_bacterial>
feature_type_acc QTL_bacterial
feature_type QTL_bacterial
default_rank 1
color darkred
shape dumbbell
drawing_lane 2
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>


<feature_type QTL_nodulation>
feature_type_acc QTL_nodulation
feature_type QTL_nodulation
default_rank 1
color burlywood
shape dumbbell
drawing_lane 2
drawing_priority 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>


<feature_type AFLP>
feature_type_acc AFLP
feature_type AFLP
default_rank 1
color  
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>


<feature_type RAPD>
feature_type_acc RAPD
feature_type RAPD
default_rank 1
color  
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>


<feature_type RFLP>
feature_type_acc RFLP
feature_type RFLP
default_rank 1
color  
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>


<feature_type Gene>
feature_type_acc Gene
feature_type Gene
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type SCAR>
feature_type_acc SCAR
feature_type SCAR
default_rank 1
color  
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type telomere>
feature_type_acc telomere
feature_type telomere
default_rank 1
color  
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type inter_repeat_PCR>
feature_type_acc inter_repeat_PCR
feature_type inter_repeat_PCR
default_rank 1
color  
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type Classical>
feature_type_acc Classical
feature_type Classical
default_rank 1
color  
shape line
area_code
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type MADS_SSAP>
feature_type_acc MADS_SSAP
feature_type MADS_SSAP
default_rank 1
color  
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type PDR1_SSAP>
feature_type_acc PDR1_SSAP
feature_type PDR1_SSAP
default_rank 1
color  
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type PDR1_RFLP>
feature_type_acc PDR1_RFLP
feature_type PDR1_RFLP
default_rank 1
color  
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type phenotypic>
feature_type_acc phenotypic
feature_type phenotypic
default_rank 1
color  
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type protein>
feature_type_acc protein
feature_type protein
default_rank 1
color  
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type simple_seq>
feature_type_acc simple_seq
feature_type simple_seq
default_rank 1
color  
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type simple_seq_RFLP>
feature_type_acc simple_seq_RFLP
feature_type simple_seq_RFLP
default_rank 1
color  
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type GenePrediction>
feature_type_acc GenePrediction
feature_type GenePrediction
default_rank 1
color orange
shape direction-arrow
drawing_lane 2
drawing_priority 1
area_code <<EOF
 my $attrs = $self->sql()->get_attributes(
                 cmap_object => $self,
                 object_id   => $feature->{'feature_id'},
                 object_type => 'feature',
                 attribute_name   => 'description',
               );
               my $description = '';
               if ( @{ $attrs || [] } ) {
                 $description = $attrs->[0]->{'attribute_value'};
               }
    $alt=$description;
EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type gap>
feature_type_acc gap
feature_type gap
default_rank 1
color brown
shape span
drawing_lane 0
drawing_priority 1
area_code <<EOF
 my $attrs = $self->sql()->get_attributes(
                 cmap_object => $self,
                 object_id   => $feature->{'feature_id'},
                 object_type => 'feature',
                 attribute_name   => 'description',
               );
               my $description = '';
               if ( @{ $attrs || [] } ) {
                 $description = $attrs->[0]->{'attribute_value'};
               }
    $alt=$description;
EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type Allozyme>
feature_type_acc Allozyme
feature_type Allozyme
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type Phenotypic>
feature_type_acc Phenotypic
feature_type Phenotypic
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type Protein>
feature_type_acc Protein
feature_type Protein
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type SNAP>
feature_type_acc SNAP
feature_type SNAP
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type STS>
feature_type_acc STS
feature_type STS
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type allele-indel>
feature_type_acc allele-indel
feature_type allele-indel
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type isozyme>
feature_type_acc isozyme
feature_type isozyme
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type size-indel>
feature_type_acc size-indel
feature_type size-indel
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type Intron marker>
feature_type_acc Intron marker
feature_type Intron marker
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type Legume anchor>
feature_type_acc Legume anchor
feature_type Legume anchor
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type NBS profiling>
feature_type_acc NBS profiling
feature_type NBS profiling
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type Southern Blot>
feature_type_acc Southern Blot
feature_type Southern Blot
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<feature_type transposon>
feature_type_acc transposon
feature_type transposon
default_rank 1
color 
shape line
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</feature_type>

<evidence_type automatic>
evidence_type_acc automatic
evidence_type automatic
rank 1
color red 
</evidence_type>


<map_type genetic>
map_type_acc genetic
map_type genetic
map_units cM
is_relational_map 
width 
shape I-beam
color 
display_order 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</map_type>

<map_type sequence_assembly>
map_type_acc sequence_assembly
map_type sequence_assembly
map_units bp
is_relational_map 
width 
shape I-beam
color 
display_order 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</map_type>

<map_type physical>
map_type_acc physical
map_type physical
map_units bands
is_relational_map 1
width 1
shape dumbbell
color 
display_order 1
area_code <<EOF
my $ftype = $feature->{'feature_type'};
my $fname = $feature->{'feature_name'};
my $facc = $feature->{'feature_acc'};
my $data = $self->data_module;
my $fdetail = $data->feature_detail_data( feature_acc => $facc );
my @xrefs = @{ $fdetail->{'xrefs'} };
my $xrefs_count = scalar(@xrefs);
my @jsonArr;
if($xrefs_count > 0) {
    foreach my $xref (@xrefs) {
	my $xref_name = $xref->{xref_name};
	my $xref_url = $xref->{xref_url};
	push(@jsonArr, sprintf('{xref_name:\'%s\', xref_url:\'%s\'}', $xref_name, $xref_url));
    }
    my $json = '[' . join(',', @jsonArr) . ']';
    my $feature_details_url = sprintf('feature?feature_acc=%s', 
				  uri_escape( $facc ));
    $code = sprintf(
	'onClick="doContextMenu(\'%s\',\'%s\',\'%s\',%s); return false;"',
	$fname, $ftype, $feature_details_url, $json);
}

EOF
required_page_code jquery_context_menu_code 
extra_forms 
</map_type>

#  The page_code is made up of javascript that is to perform the tasks in 
#    map/feature area_code.  The page_code is
#    added to the top of the page and is most likely going to be functions
#    to be called.

<page_code jquery_context_menu_code>
page_code <<EOF

<link type="text/css" rel="stylesheet" 
      href="http://code.jquery.com/ui/1.10.1/themes/smoothness/jquery-ui.min.css">

<script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
<script src="http://code.jquery.com/ui/1.10.1/jquery-ui.min.js"></script>

<div id="context_menu" title="widget title here">
<!-- widget content -->
</div>

<script language="javascript">

var dialogX; 
var dialogY;

//
// capture the mouse coords for when we show the context menu
//

$(document).ready( function () {
  $(document).mousemove(function (e) {
  // correct for horiz scrolling
  var left = $(window).scrollLeft();
  dialogX = e.pageX - left;
  // correct for vert scrolling
  var top = $(window).scrollTop(); 
  dialogY = e.pageY - top;
  });
});

function doContextMenu( featureName, featureType, featureDetailsUrl, xrefUrls ) {
  var dialogTitle = featureName + ' (' + featureType + ')';

  // get the jquery-ui dialog div
  var m = $('#context_menu');

  // clear any previous markup if the dialog was shown before
  m.empty();

  // add links-outs for the xrefs
  xrefUrls.forEach( function (i) {
    m.append($('<p>').append($('<a>').attr('href', i.xref_url).append( i.xref_name + '...' )));
  } );

  //  add a link to the cmap feature url
  // (what clicking on the imagemap normally did before!)
  m.append($('<p>').append($('<a>').attr('href', featureDetailsUrl).append( 'CMap feature details...' )));


  // show the dialog at mouse position, with blind effect, and
  // and the new title
  m.dialog( {
    title: dialogTitle,
    show: 'blind',
    position: [dialogX, dialogY],
    } );
}
</script>

EOF
</page_code>

#  The extra_forms contain extra form elements.  This is so the admin can add
#    text fields, buttons, etc.  The demmo is commented out but can be used
#    build more interesting form elements.


#<extra_form feature_list>
#extra_form <<EOF
#<tr><td align="right">Feature List:</td>
#<td><input type=text name='featureList'>
#<input type=BUTTON onClick="clearFeatureList();" value='clear' id='clear'>
#<input type=Submit onClick="return changeFormAction('/cgi-bin/launch_test.cgi');" value='Submit' >
#</td></tr>
#EOF
#</form_extras>
